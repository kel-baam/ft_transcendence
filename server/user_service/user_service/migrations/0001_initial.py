# Generated by Django 4.2.18 on 2025-01-27 17:14

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('username', models.CharField(max_length=50, unique=True, validators=[django.core.validators.MinLengthValidator(3), django.core.validators.RegexValidator('^[a-zA-Z0-9!@#$%^&*()_+=\\-\\[\\]{};:\\\'",.<>?/|\\\\`~ \\t\\n\\r]*$', 'Only alphabetic, numeric, special characters, and whitespace are allowed.')])),
                ('first_name', models.CharField(max_length=50, validators=[django.core.validators.MinLengthValidator(3), django.core.validators.RegexValidator('^[a-zA-Z_\\-\\r ]*$', 'Only alphabetic characters, underscores, hyphens, carriage returns, and spaces are allowed.')])),
                ('last_name', models.CharField(max_length=50, validators=[django.core.validators.MinLengthValidator(3), django.core.validators.RegexValidator('^[a-zA-Z_\\-\\r ]*$', 'Only alphabetic characters, underscores, hyphens, carriage returns, and spaces are allowed.')])),
                ('email', models.EmailField(max_length=50, unique=True)),
                ('phone_number', models.CharField(blank=True, max_length=15, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('picture', models.ImageField(blank=True, default='users_pics/default.png', null=True, upload_to='users_pics/')),
                ('gender', models.CharField(blank=True, max_length=255)),
                ('nationality', models.CharField(blank=True, max_length=255)),
                ('status', models.BooleanField(null=True)),
                ('enabled_twoFactor', models.BooleanField(default=False)),
                ('is_verify', models.BooleanField(default=False)),
                ('age', models.CharField(blank=True, max_length=255, validators=[django.core.validators.RegexValidator(message='Age must be a valid positive number.', regex='^\\d+$')])),
                ('verify_token', models.CharField(max_length=255, null=True)),
            ],
            options={
                'db_table': 'User',
            },
        ),
        migrations.CreateModel(
            name='Request',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('accepted', 'Accepted'), ('blocked', 'Blocked'), ('pending', 'Pending')], max_length=255)),
                ('reciever', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_request', to='user_service.user')),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_request', to='user_service.user')),
            ],
            options={
                'db_table': 'Request',
            },
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.FloatField(default=0)),
                ('level', models.FloatField(default=0.0)),
                ('Rank', models.BigIntegerField(default=0)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='user_service.user')),
            ],
            options={
                'db_table': 'Player',
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('tournament', 'Tournament'), ('request', 'Request'), ('accepted', 'Accepted')], max_length=10)),
                ('time', models.TimeField()),
                ('reciever', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notif_to', to='user_service.user')),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notif_from', to='user_service.user')),
            ],
            options={
                'db_table': 'Notification',
            },
        ),
        migrations.CreateModel(
            name='Match',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('player1_points', models.PositiveIntegerField()),
                ('player2_points', models.PositiveIntegerField()),
                ('status', models.CharField(choices=[('active', 'Active'), ('completed', 'Completed')], max_length=255)),
                ('player1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='player1', to='user_service.player')),
                ('player2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='player2', to='user_service.player')),
            ],
            options={
                'db_table': 'Match',
            },
        ),
        migrations.CreateModel(
            name='Achievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('status', models.BooleanField(default=False)),
                ('picture', models.JSONField()),
                ('PlayerId', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='badge_locked', to='user_service.player')),
            ],
            options={
                'db_table': 'Achievement',
            },
        ),
    ]

events {
    worker_connections 1024;  # Max number of simultaneous connections per worker
}
http
{
 
    include       mime.types;
    default_type  application/octet-stream;

    upstream auth-service {
        server auth-service:8000;
    }

    upstream user-service {
        server user-service:8001;
    }

    upstream tournament-service {
        server tournament-service:8002;
    }
    # upstream home-service {
    #     server home-service:8001;
    # }

    server {
        listen 3000;
        server_name localhost;
        index /assets/index.html;

        # location /socket/
        # {
        #     proxy_pass http://auth-service/ws/some_path/;
        #     proxy_http_version 1.1;
        #     proxy_set_header Upgrade $http_upgrade;
        #     proxy_set_header Connection "upgrade";
        #     proxy_set_header Host $host;
        # }

        # location /home{
        
        # location /home/{
        #     auth_request /auth/validate;
        #     # auth_request_set $auth_user $upstream_http_x_authenticated_user;
        #     # proxy_set_header X-Authenticated-User $auth_user;
        #     # proxy_pass http://auth-service/auth/register/;
        # }
        
        location /auth/twoFactor/
        {
            auth_request /auth/validate;
            auth_request_set $auth_user $upstream_http_x_authenticated_user;
            proxy_set_header X-Authenticated-User $auth_user;
            proxy_pass http://auth-service/auth/twoFactor/;
            proxy_set_header Cache-Control "no-store, no-cache, must-revalidate, max-age=0";
            proxy_set_header Pragma "no-cache";
            proxy_set_header Expires "0";
        }

        location /auth/validate
        {
            internal;
            proxy_pass http://auth-service/auth/islogged/;
            proxy_set_header Cache-Control "no-store, no-cache, must-revalidate, max-age=0";
            proxy_set_header Pragma "no-cache";
            proxy_set_header Expires "0";
            
            # proxy_pass http://auth-service/api/refresh/token/;

        }
        
        location /auth
        {
            proxy_pass http://auth-service/auth;
        }

        # }
        location /auth/refreshToken {
            limit_except GET POST DELETE PUT {
                allow all;
            }
            proxy_pass http://auth-service/api/refresh/token/;
            proxy_set_header Cache-Control "no-store, no-cache, must-revalidate, max-age=0";
            proxy_set_header Pragma "no-cache";
            proxy_set_header Expires "0";
        }

        location /api/user
        {
            auth_request /auth/validate;
            auth_request_set $auth_user $upstream_http_x_authenticated_user;
            proxy_set_header X-Authenticated-User $auth_user;
            proxy_pass http://user-service;
            # proxy_pass http://auth-service/api/refresh/token/;
            proxy_set_header Cache-Control "no-store, no-cache, must-revalidate, max-age=0";
            proxy_set_header Pragma "no-cache";
            proxy_set_header Expires "0";
        }
        
        location /tournament/api {
            limit_except GET POST DELETE PUT {
                allow all;
            }
            auth_request /auth/validate;  # Ensure the request is authenticated
            auth_request_set $auth_user $upstream_http_x_authenticated_user;
            proxy_set_header X-Authenticated-User $auth_user;

            # Limit the allowed methods to GET, POST, and DELETE

            # Proxy the request to the backend service
            proxy_pass http://tournament-service;

            # Set headers for cache control, ensuring no caching occurs
            proxy_set_header Cache-Control "no-store, no-cache, must-revalidate, max-age=0";
            proxy_set_header Pragma "no-cache";
            proxy_set_header Expires "0";
        }

        location /csrf{
            proxy_pass http://auth-service/get-csrf-token/;
        }

        location / {
        
            # auth_request /validate;
            root /usr/share/nginx/html;
            add_header Cache-Control "no-store, no-cache, must-revalidate, max-age=0";
            add_header Pragma "no-cache";
            add_header Expires "0";
     
            # proxy_pass http://client-service;
            # proxy_set_header Host $host;
            # proxy_set_header X-Real-IP $remote_addr;
            # proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        # location /home/ {
        #     proxy_pass http://home_service:8001/;
        #     proxy_set_header Host $host;
        #     proxy_set_header X-Real-IP $remote_addr;
        #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        # }

        # location /game/ {
        #     proxy_pass http://game_service:8002/;
        #     proxy_set_header Host $host;
        #     proxy_set_header X-Real-IP $remote_addr;
        #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        # }

        # Optional: Set up authentication for the entire server or individual paths
        # location / {
        #     auth_basic "Restricted";
        #     auth_basic_user_file /etc/nginx/.htpasswd;
        #     proxy_pass http://home_service:8001/;
        # }

        location ~* \.css$ {
            root /usr/share/nginx/html/assets;
            try_files $uri =404;
            add_header Content-Type text/css;
        }

        location /fonts/{
            root /usr/share/nginx/html/assets/;
            try_files $uri =404;
            add_header Content-Type text/css;
        }

        location ~* \.(jpg|jpeg|png|gif|ico)$ {
            root /usr/share/nginx/html/assets/;
            try_files $uri =404;
        }
    }
}

events {
    worker_connections 1024;  # Max number of simultaneous connections per worker
}
http
{
 
    include       mime.types;
    default_type  application/octet-stream;
    client_max_body_size 100M;
    client_body_buffer_size 128k;

    upstream auth-service {
        server auth-service:8000;
    }

    upstream user-service {
        server user-service:8001;
    }

    upstream tournament-service {
        server tournament-service:8002;
    }

    upstream matchmaking-service {
        server matchmaking-service:8003;
    }

    upstream game-service {
        server game-service:8004;
    }
    
    # upstream home-service {
    #     server home-service:8001;
    # }

    server {
        listen 443 ssl;
        listen [::]:443 ssl default_server;
        ssl_protocols TLSv1.2;

        ssl_certificate /etc/nginx/ssl/cert.crt;
        ssl_certificate_key /etc/nginx/ssl/k.key;

        server_name 10.14.4.4;
        index /assets/index.html;
        
        client_max_body_size 100M;

        proxy_set_header Cache-Control "no-store, no-cache, must-revalidate, max-age=0";
        proxy_set_header Pragma "no-cache";
        proxy_set_header Expires "0";

        location / {
        
            root /usr/share/nginx/html;
    
        }
        
        location /ws/game {
            proxy_pass http://game-service;  
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        location /ws/notification {
            proxy_pass http://user-service;  
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        location /ws/matchmaking {
            proxy_pass http://matchmaking-service;  
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        location /ws/tournament {
            proxy_pass http://tournament-service;  
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
        
        location /ws/friends-status {
            proxy_pass http://user-service;  
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        location /auth/twoFactor/
        {
            auth_request /auth/validate;
            auth_request_set $auth_user $upstream_http_x_authenticated_user;
            proxy_set_header X-Authenticated-User $auth_user;
            proxy_pass http://auth-service/auth/twoFactor/;
            
        }
    
        location /isAuthenticated
        {
            proxy_pass http://auth-service/auth/islogged/;
           
        }
        
        location /auth/validate
        {
            internal;
            proxy_set_header X-Request-Referer $http_referer;
            proxy_pass http://auth-service/auth/islogged/;
           
        }
        
        location /auth
        {
            proxy_pass http://auth-service/auth;
        }

        # location /auth/refreshToken {

        #     proxy_pass http://auth-service/api/refresh/token/;
        #     proxy_set_header Cache-Control "no-store, no-cache, must-revalidate, max-age=0";
        #     proxy_set_header Pragma "no-cache";
        #     proxy_set_header Expires "0";
        # }

        location /api/user
        {
            auth_request /auth/validate;
            auth_request_set $auth_user $upstream_http_x_authenticated_user;
            proxy_set_header X-Authenticated-User $auth_user;
            proxy_pass http://user-service;
        }
        
        location /api/tournament {
            auth_request /auth/validate;
            auth_request_set $auth_user $upstream_http_x_authenticated_user;
            proxy_set_header X-Authenticated-User $auth_user;

            limit_except GET POST DELETE PUT{
                deny all;
            }
            proxy_pass http://tournament-service;
        }

        location /api/game
        {
            auth_request /auth/validate;
            auth_request_set $auth_user $upstream_http_x_authenticated_user;
            proxy_set_header X-Authenticated-User $auth_user;
            proxy_pass http://game-service;
        }

        location /media/users_pics/
        {
            auth_request /auth/validate;
            # auth_request_set $auth_user $upstream_http_x_authenticated_user;
            # proxy_set_header X-Authenticated-User $auth_user;
            proxy_pass http://user-service;
        }
         location /media/player_images/
        {
            auth_request /auth/validate;
            # auth_request_set $auth_user $upstream_http_x_authenticated_user;
            # proxy_set_header X-Authenticated-User $auth_user;
            proxy_pass http://tournament-service;
        }
        location /static/images/
        {
            auth_request /auth/validate;
            # auth_request_set $auth_user $upstream_http_x_authenticated_user;
            # proxy_set_header X-Authenticated-User $auth_user;
            proxy_pass http://user-service;

        }

        location /csrf{
            proxy_pass http://auth-service/get-csrf-token/;
        }



        location ~* ^/(?!media/|static/)(.*)\.(css|jpg|jpeg|png|gif|ico)$ {
            root /usr/share/nginx/html/assets;
            try_files $uri =404;
            add_header Content-Type text/css;
        }

        location /fonts/{
            root /usr/share/nginx/html/assets/;
            try_files $uri =404;
            add_header Content-Type text/css;
        }

    }
}